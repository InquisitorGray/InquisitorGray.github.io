# This is a basic workflow to help you get started with Actions

name: drawio-export

# Controls when the action will run. 
on:
  push:
#  pull_request:
#  pull_request_target:
    paths:
      - '**.drawio'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  drawio-export:
    runs-on: ubuntu-latest
      
    steps:

      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: file_changes
        uses: jitterbit/get-changed-files@v1
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: check-added-modified-and-copy
        id: check_added_modified
        run: |
          echo '::set-output name=INPUTFILES::true'
          files_added_modified=${{steps.file_changes.outputs.added_modified}}
          
          srcfilepath="./TMP/XML/"
          fileCnt=0
          for changed_file in ${files_added_modified}; do
            fullfilename=${changed_file}
            fulldirname=$(dirname "${fullfilename}")
            filename=$(basename "${fullfilename}")
            ext="${filename##*.}"
            if [ "${ext}" = "drawio" ];
            then
              srcfilename="${srcfilepath}${filename}"
              echo "${fulldirname}"
              echo "${srcfilename}"
              #sudo cp "./"$fullfilename $srcfilename
              rsync -a "./"$fullfilename $srcfilename
              ((fileCnt++))
              echo '$fileCnt'
            fi
          done
          if [ ${fileCnt} -eq 0 ];
          then
            echo '::set-output name=INPUTFILES::false'
          fi

      - name: check-renamed-and-copy
        id: check_renamed
        run: |
          echo '::set-output name=INPUTFILES::true'
          files_renamed=${{steps.file_changes.outputs.renamed}}
          
          srcfilepath="./TMP/XML/"
          fileCnt=0
          for changed_file in ${files_renamed}; do
            fullfilename=${changed_file}
            filename=$(basename "${fullfilename}")
            ext="${filename##*.}"
            if [ "${ext}" = "drawio" ];
            then
              srcfilename="${srcfilepath}${filename}"
              #sudo cp "./"$fullfilename $srcfilename
              rsync -a "./"$fullfilename $srcfilename
              ((fileCnt++))
              echo '$fileCnt'
            fi
          done
          if [ ${fileCnt} -eq 0 ];
          then
            echo '::set-output name=INPUTFILES::false'
          fi

      - name: Export drawio files to svg files
        if: steps.check_added_modified.outputs.INPUTFILES == 'true' || steps.check_renamed.outputs.INPUTFILES == 'true'
        uses: rlespinasse/drawio-export-action@v1.x
        with:
          path: 'TMP/XML/'
          format: svg
          output: 'TMP/SVG/'
          transparent: true

      - name: removeTMPXML
        if: steps.check_added_modified.outputs.INPUTFILES == 'true' || steps.check_renamed.outputs.INPUTFILES == 'true'
        run: sudo rm TMP/XML/*.drawio

      - if: steps.check_added_modified.outputs.INPUTFILES == 'true'
        run: |
          ls TMP/SVG/
          files_added_modified=${{steps.file_changes.outputs.added_modified}}
          destfilepath="TMP/SVG/"
          for changed_file in ${files_added_modified}; do
            fullfilename=${changed_file}
            filename=$(basename "${fullfilename}")
            ext="${filename##*.}"
            if [ "${ext}" = "drawio" ];
            then
              filename=$(basename "${fullfilename}" "drawio")
              filename="${filename}.svg"
              destfilename="${destfilepath}${filename}"
              fullfilename=$(dirname "${changed_file})/${filename}"
              #sudo cp "${destfilename}" "${fullfilename}"
              rsync -a "${destfilename}" "${fullfilename}"
            fi
          done

      - if: steps.check_renamed.outputs.INPUTFILES == 'true'
        run: |
          files_renamed=${{ steps.file_changes.outputs.renamed }}
          destfilepath="TMP/SVG/"
          for changed_file in ${files_renamed}; do
            fullfilename=${changed_file}
            filename=$(basename "${fullfilename}")
            ext="${filename##*.}"
            if [ "${ext}" = "drawio" ];
            then
              filename=$(basename "${fullfilename}" "drawio")
              filename="${filename}.svg"
              destfilename="${destfilepath}${filename}"
              fullfilename=$(dirname "${changed_file})/${filename}"
              #sudo cp "${destfilename}" "${fullfilename}"
              rsync -a "${destfilename}" "${fullfilename}"
            fi
          done

      - name: removeTMPSVG
        if: steps.check_added_modified.outputs.INPUTFILES == 'true' || steps.check_renamed.outputs.INPUTFILES == 'true'
        run: sudo rm TMP/SVG/*.svg

      - name: Get author and committer info from HEAD commit
        if: steps.check_added_modified.outputs.INPUTFILES == 'true' || steps.check_renamed.outputs.INPUTFILES == 'true'
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Commit changed files
        if: steps.check_added_modified.outputs.INPUTFILES == 'true' || steps.check_renamed.outputs.INPUTFILES == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4.9.2
        with:
          commit_message: "docs: sync draw.io exported files"
          commit_user_name: "${{ env.GIT_COMMIT_COMMITTER_NAME }}"
          commit_user_email: "${{ env.GIT_COMMIT_COMMITTER_EMAIL }}"
          commit_author: "${{ env.GIT_COMMIT_AUTHOR }}"
