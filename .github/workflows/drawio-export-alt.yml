# This is a basic workflow to help you get started with Actions

name: drawio-export

# Controls when the action will run. 
on:
  push:
#  pull_request:
#  pull_request_target:
    paths:
      - '**.xml'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  drawio-export:
    runs-on: ubuntu-latest
      
    steps:

      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: jitterbit/get-changed-files@v1
        id: abc
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Printing
        run: |
          echo "All:"
          echo "${{ steps.abc.outputs.all }}"
          echo "Added:"
          echo "${{ steps.abc.outputs.added }}"
          echo "Removed:"
          echo "${{ steps.abc.outputs.removed }}"
          echo "Renamed:"
          echo "${{ steps.abc.outputs.renamed }}"
          echo "Modified:"
          echo "${{ steps.abc.outputs.modified }}"
          echo "Added+Modified:"
          echo "${{ steps.abc.outputs.added_modified }}"


      - id: file_changes
        uses: trilom/file-changes-action@v1.2.3
        with:
          output: ' '
      - name: test
        run: |
          pwd
          ls
          echo '${{ steps.file_changes.outputs.files}}'
          echo '${{ steps.file_changes.outputs.files_modified}}'
          echo '${{ steps.file_changes.outputs.files_added}}'
          echo '${{ steps.file_changes.outputs.files_removed}}'
          files_added_modified='${{ steps.file_changes.outputs.files_added}} ${{ steps.file_changes.outputs.files_modified }}'
          echo '${files_added_modified}'
          #srcfilepath=$(cat ${{ env.GITHUB_WORKSPACE }} "/TMP/XML/")
          srcfilepath="TMP/XML/"
          #for changed_file in ${{ steps.files.outputs.added_modified }}; do
          for changed_file in ${files_added_modified}; do
            fullfilename=${changed_file}
            filename=$(basename "${fullfilename}")
            ext="${filename##*.}"
            echo "${ext}"
            if [ "${ext}" = "xml" ]
            then
              srcfilename="${srcfilepath}${filename}"
              echo "${srcfilename}"
              cp "${fullfilename}" "${srcfilename}"
            fi
          done
          ls "${srcfilepath}"

      - name: Export drawio files to svg files
        uses: rlespinasse/drawio-export-action@v1.x
        with:
          path: 'TMP/XML/'
          format: svg
          output: 'TMP/SVG/'
          transparent: true

      - id: removeTMPXML
        run: rm TMP/XML/*.xml

      - run: |
          ls TMP/SVG/
          files_added_modified='${{ steps.file_changes.outputs.files_added}} ${{ steps.file_changes.outputs.files_modified }}'
          #destfilepath=cat ${{ env.GITHUB_WORKSPACE }} "/TMP/SVG/"
          destfilepath="TMP/SVG/"
          #for changed_file in ${{ steps.files.outputs.added_modified }}; do
          for changed_file in ${files_added_modified}; do
            fullfilename=${changed_file}
            filename=$(basename "${fullfilename}")
            ext="${filename##*.}"
            if [ "${ext}" = "xml" ]
            then
              filename=$(basename "${fullfilename}" "xls")
              echo "${filename}"
              filename="${filename}.svg"
              echo "${filename}"
              destfilename="${destfilepath}${filename}"
              echo "${destfilename}"
              fullfilename=$(dirname "${changed_file})/${filename}"
              cp "${destfilename}" "${fullfilename}"
            fi
          done

      - id: removeTMPSVG
        run: rm TMP/SVG/*.svg

      - name: Get author and committer info from HEAD commit
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Commit changed files
        uses: stefanzweifel/git-auto-commit-action@v4.9.2
        with:
          commit_message: "docs: sync draw.io exported files"
          commit_user_name: "${{ env.GIT_COMMIT_COMMITTER_NAME }}"
          commit_user_email: "${{ env.GIT_COMMIT_COMMITTER_EMAIL }}"
          commit_author: "${{ env.GIT_COMMIT_AUTHOR }}"

